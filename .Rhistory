test <- "greater"
mis_inf[i, "binom"] <- binom.test(as.numeric(mis_inf[i, 3:4]))$p_value
}
i = 1
binom.test(as.numeric(mis_inf[i, 3:4]))$p_value
binom.test(as.numeric(mis_inf[i, 3:4]))
a <- binom.test(as.numeric(mis_inf[i, 3:4]))
a
a$p.value
# Do the binomial test
mis_inf$binom <- 0
for(i in 1:nrow(mis_inf)){
test <- "two-sided"
if(mis_inf[i, "Infected"] < mis_inf[i, "Random"])
test <- "lesser"
if(mis_inf[i, "Infected"] > mis_inf[i, "Random"])
test <- "greater"
mis_inf[i, "binom"] <- a <- binom.test(as.numeric(mis_inf[i, 3:4]))$p.value
}
View(mis_inf)
#Apply bonferroni correction
mis_inf$binom <- mis_inf$binom * nrow(mis_inf)
View(mis_inf)
# Filter for significance
mis_inf <- mis_inf[mis_inf$binom <= 0.05, ]
View(mis_inf)
source('/media/FILES/Dropbox/Turko PhD Data/Turko et al Chapter 5 Greifensee/Time Series/Revision_1.R')
#Do a Fisher's exact test to check whether infected and random samples differ at each date
dates <- unique(counts$date)
pop.fish <- data.frame(date = dates, p_value = 0)
for(i in 1:length(dates)){
tmp <- counts[counts$date == dates[i], 1:4]
tmp <- dcast(tmp, mlg ~ type)
tmp <- tmp[tmp$Infected != 0 | tmp$Random !=0, ]
fish <- fisher.test(as.matrix(tmp[, 2:3]), workspace = 1e+09)
pop.fish[i, "p_value"] <- fish$p.value
}
View(pop.fish)
pop.fish$p_value <- pop.fish$p_value * nrow(pop.fish)
View(pop.fish)
# Stats 2: Fisher test on common clones -----------------------------------
# Take only those over 5%
common <- ddply(counts, .(date, mlg), function(x){
if(sum(x$percent) >= 0.05)
x
})
View(common)
common <- dcast(common, date + mlg ~ type, value.var = "count")
#Make holder & do the test
dates2 <- unique(common$date)
common.fish <- data.frame(date = dates2, p_value = 0)
View(counts)
View(common)
i = 1
tmp <- common[common$date == dates2[i], 3:4]
View(pop.graph2)
View(tmp)
tmp <- tmp[tmp$Infected != 0 | tmp$Random !=0, ]
View(tmp)
fish <- fisher.test(as.matrix(tmp), workspace = 1e+09)
fish
for(i in 1:length(dates2)){
tmp <- common[common$date == dates2[i], 3:4]
tmp <- tmp[tmp$Infected != 0 | tmp$Random !=0, ]
fish <- fisher.test(as.matrix(tmp), workspace = 1e+09)
common.fish[i, "p_value"] <- fish$p.value
}
View(common.fish)
#Apply Bonferroni correction
common.fish$p_value <- common.fish$p_value * nrow(common.fish)
View(common.fish)
View(mis_inf)
View(pop.fish)
# Stats 2: Fisher test on common clones -----------------------------------
# Take only those over 5%, and reshape to suit test
common <- ddply(counts, .(date, mlg), function(x){
if(sum(x$percent) >= 0.1)
x
})
common <- dcast(common, date + mlg ~ type, value.var = "count")
#Make holder & do the test
dates2 <- unique(common$date)
common.fish <- data.frame(date = dates2, p_value = 0)
for(i in 1:length(dates2)){
tmp <- common[common$date == dates2[i], 3:4]
tmp <- tmp[tmp$Infected != 0 | tmp$Random !=0, ]
fish <- fisher.test(as.matrix(tmp), workspace = 1e+09)
common.fish[i, "p_value"] <- fish$p.value
}
#Apply Bonferroni correction
common.fish$p_value <- common.fish$p_value * nrow(common.fish)
View(common.fish)
# For individual clones, choose only those over 6 in either sample
mis_inf <- ddply(counts, .(date, mlg), function(x){
if(sum(x$count) >= 6)
x
})
#Cast them into a useful shape
mis_inf <- dcast(mis_inf, date + mlg ~ type, value.var = "count")
# Do the binomial test
mis_inf$binom <- 0
for(i in 1:nrow(mis_inf)){
test <- "two-sided"
if(mis_inf[i, "Infected"] < mis_inf[i, "Random"])
test <- "lesser"
if(mis_inf[i, "Infected"] > mis_inf[i, "Random"])
test <- "greater"
mis_inf[i, "binom"] <- a <- binom.test(as.numeric(mis_inf[i, 3:4]))$p.value
}
#Apply bonferroni correction
mis_inf$binom <- mis_inf$binom * nrow(mis_inf)
View(mis_inf)
#for percents
pop.graph2 <- ggplot(percent_by_date,
aes(x = mlg2, y = percent * 100)) +
facet_grid(date~type, scales = "free_y") +
geom_bar(stat = "identity", width = 0.8) +
theme_bw() +
removeGrid() +
scale_x_discrete(expand = c(0.02, 0.02)) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
ylab(label = "Percent of Sample") +
xlab(label = "MLG") +
theme(aspect.ratio = 1) +
coord_flip()
pop.graph2
#for percents
pop.graph2 <- ggplot(percent_by_date,
aes(x = mlg2, y = percent * 100)) +
facet_grid(date~type, scales = "free_y") +
geom_bar(stat = "identity", width = 0.8) +
theme_bw() +
removeGrid() +
scale_x_discrete(expand = c(0.02, 0.02)) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
ylab(label = "Percent of Sample") +
xlab(label = "MLG") +
theme(aspect.ratio = 1) +
coord_flip() +
geom_hline(yintercept = 5, size = 0.1)
pop.graph2
View(percent_by_date)
View(pop.fish)
View(percent_by_date)
View(counts_by_date)
View(common)
View(pop.fish)
#write to file
write.csv(pop.fish, "whole_population.csv")
#write to file
write.csv(pop.fish, "whole_population.csv", sep = ";")
#write to file
write.table(pop.fish, "whole_population.csv")
#write to file
write.table(pop.fish, "whole_population.csv", row.names = F)
#write to file
write.table(common.fish, "common_population.csv", row.names = F)
# For individual clones, choose only those over 6 in either sample
mis_inf <- ddply(counts, .(date, mlg), function(x){
if(sum(x$count) >= 6)
x
})
#Cast them into a useful shape
mis_inf <- dcast(mis_inf, date + mlg ~ type, value.var = "count")
# Do the binomial test
mis_inf$binom <- 0
for(i in 1:nrow(mis_inf)){
test <- "two-sided"
if(mis_inf[i, "Infected"] < mis_inf[i, "Random"])
test <- "lesser"
if(mis_inf[i, "Infected"] > mis_inf[i, "Random"])
test <- "greater"
mis_inf[i, "binom"] <- a <- binom.test(as.numeric(mis_inf[i, 3:4]))$p.value
}
View(mis_inf)
#Apply bonferroni correction
mis_inf$binom <- mis_inf$binom * nrow(mis_inf)
#write to file
write.table(mis_inf, "over_infection.csv", row.names = F)
#filter by significance
mis_inf <- mis_inf[mis_inf$binom <= 0.05]
#filter by significance
mis_inf <- mis_inf[mis_inf$binom <= 0.05, ]
#Cast them into a useful shape
mis_inf <- dcast(mis_inf, date + mlg ~ type, value.var = "count")
# For individual clones, choose only those over 6 in either sample
mis_inf <- ddply(counts, .(date, mlg), function(x){
if(sum(x$count) >= 6)
x
})
#Cast them into a useful shape
mis_inf <- dcast(mis_inf, date + mlg ~ type, value.var = "count")
# Do the binomial test
mis_inf$binom <- 0
for(i in 1:nrow(mis_inf)){
test <- "two-sided"
if(mis_inf[i, "Infected"] < mis_inf[i, "Random"])
test <- "lesser"
if(mis_inf[i, "Infected"] > mis_inf[i, "Random"])
test <- "greater"
mis_inf[i, "binom"] <- a <- binom.test(as.numeric(mis_inf[i, 3:4]), alternative = test)$p.value
}
for(i in 1:nrow(mis_inf)){
test <- "two.sided"
if(mis_inf[i, "Infected"] < mis_inf[i, "Random"])
test <- "less"
if(mis_inf[i, "Infected"] > mis_inf[i, "Random"])
test <- "greater"
mis_inf[i, "binom"] <- a <- binom.test(as.numeric(mis_inf[i, 3:4]), alternative = test)$p.value
}
View(mis_inf)
#Apply bonferroni correction
mis_inf$binom <- mis_inf$binom * nrow(mis_inf)
#filter by significance
mis_inf <- mis_inf[mis_inf$binom <= 0.05, ]
View(mis_inf)
#write to file
write.table(mis_inf, "over_infection.csv", row.names = F)
View(mis_inf)
# Redo graph in light of stats --------------------------------------------
#re-create individual mlg names in stats table
mis_inf$mlg2 <- paste(mis_inf$date, mis_inf$mlg, sep = "_")
#Filter graph input tables based on presence in stats table
percent_by_date2 <- percent_by_date[percent_by_date$mlg2 %in% mis_inf$mlg2, ]
View(percent_by_date2)
pop.graph.red <- pop.graph2 +
geom_bar(data = percent_by_date2, color = "red")
pop.graph.red
pop.graph.red <- pop.graph2 +
geom_bar(data = percent_by_date2, aes (x = mlg2, y = count), color = "red")
pop.graph.red
View(percent_by_date2)
pop.graph.red <- pop.graph2 +
geom_bar(data = percent_by_date2, aes (x = mlg2, y = percent), color = "red")
pop.graph.red <- pop.graph2 +
geom_bar(data = percent_by_date2, aes (x = mlg2, y = percent), color = "red")
pop.graph.red
pop.graph.red <- pop.graph2 +
geom_bar(data = percent_by_date2, stat = "identity",
aes (x = mlg2, y = percent), color = "red")
pop.graph.red
ggsave(filename = "test.pdf", pop.graph2.red, height = 10, width = 4, units = "in", dpi = 600)
pop.graph2.red <- pop.graph2 +
geom_bar(data = percent_by_date2, stat = "identity",
aes (x = mlg2, y = percent), color = "red")
pop.graph2.red <- pop.graph2 +
geom_bar(data = percent_by_date2, stat = "identity",
aes (x = mlg2, y = percent), color = "red")
pop.graph2.red
ggsave(filename = "test.pdf", pop.graph2.red, height = 10, width = 4, units = "in", dpi = 600)
pop.graph2.red <- pop.graph2 +
geom_bar(data = percent_by_date2, stat = "identity",
aes (x = mlg2, y = percent), fill = "red")
pop.graph2.red
ggsave(filename = "test.pdf", pop.graph2.red, height = 10, width = 4, units = "in", dpi = 600)
pop.graph2.red <- pop.graph2 +
geom_bar(data = percent_by_date2, stat = "identity",
aes (x = mlg2, y = percent), fill = "red") +
coord_flip()
pop.graph2.red
ggsave(filename = "test.pdf", pop.graph2.red, height = 10, width = 4, units = "in", dpi = 600)
View(percent_by_date)
View(percent_by_date2)
pop.graph2.red <- pop.graph2 +
geom_bar(data = percent_by_date2, stat = "identity",
aes(x = mlg2, y = percent, fill = "red")) +
coord_flip()
pop.graph2.red
pop.graph2.red <- pop.graph2 +
geom_bar(data = percent_by_date2, stat = "identity",
aes(x = mlg2, y = percent), color = "red", fill = "red") +
coord_flip()
pop.graph2.red
# Redo graph in light of stats --------------------------------------------
# Add stats info to graph input tables
percent_by_date$fill = "black"
# Redo graph in light of stats --------------------------------------------
# Add stats info to graph input tables
percent_by_date$fill = "black"
percent_by_date[percent_by_date$mlg2 %in% mis_inf$mlg2, "fill"] <- "red"
pop.graph2.red <- pop.graph2 +
geom_bar(aes(fill = fill))
pop.graph2.red
pop.graph2.red <- pop.graph2 +
geom_bar(data = percent_by_date, aes(fill = fill))
pop.graph2.red
pop.graph2.red <- pop.graph2 +
geom_bar(data = percent_by_date, aes(fill = fill), stat = "identity")
pop.graph2.red
pop.graph2.red <- pop.graph2 +
geom_bar(data = percent_by_date, fill = fill, stat = "identity")
pop.graph2.red
pop.graph2.red <- pop.graph2 +
geom_bar(data = percent_by_date, fill = percent_by_date$fill, stat = "identity")
pop.graph2.red
ggsave(filename = "test.pdf", pop.graph2.red, height = 10, width = 4, units = "in", dpi = 600)
#for percents
pop.graph2 <- ggplot(percent_by_date,
aes(x = mlg2, y = percent * 100)) +
facet_grid(date~type, scales = "free_y") +
geom_bar(stat = "identity", width = 0.8, fill = fill) +
theme_bw() +
removeGrid() +
scale_x_discrete(expand = c(0.02, 0.02)) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
ylab(label = "Percent of Sample") +
xlab(label = "MLG") +
theme(aspect.ratio = 1) +
coord_flip() +
geom_hline(yintercept = 5, size = 0.1)
#for percents
pop.graph2 <- ggplot(percent_by_date,
aes(x = mlg2, y = percent * 100)) +
facet_grid(date~type, scales = "free_y") +
geom_bar(stat = "identity", width = 0.8, fill = percent_by_date$fill) +
theme_bw() +
removeGrid() +
scale_x_discrete(expand = c(0.02, 0.02)) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
ylab(label = "Percent of Sample") +
xlab(label = "MLG") +
theme(aspect.ratio = 1) +
coord_flip() +
geom_hline(yintercept = 5, size = 0.1)
pop.graph2
ggsave(filename = "test.pdf", pop.graph2 height = 10, width = 4, units = "in", dpi = 600)
ggsave(filename = "test.pdf", pop.graph2, height = 10, width = 4, units = "in", dpi = 600)
pop.graph2.red <- pop.graph2 +
geom_bar(data = percent_by_date, aes(x = mlg2, y = percent * 100), fill = percent_by_date$fill,
stat = "identity")
pop.graph2.red
pop.graph2.red <- pop.graph2 +
geom_bar(data = percent_by_date, aes(x = mlg2, y = percent * 100),
stat = "identity")
pop.graph2.red
#for percents
pop.graph2 <- ggplot(percent_by_date,
aes(x = mlg2, y = percent * 100)) +
facet_grid(date~type, scales = "free_y") +
geom_bar(stat = "identity", width = 0.8) +
theme_bw() +
removeGrid() +
scale_x_discrete(expand = c(0.02, 0.02)) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
ylab(label = "Percent of Sample") +
xlab(label = "MLG") +
theme(aspect.ratio = 1) +
coord_flip() +
geom_hline(yintercept = 5, size = 0.1)
pop.graph2
pop.graph2.red <- pop.graph2 +
geom_bar(data = percent_by_date, aes(x = mlg2, y = percent * 100),
stat = "identity")
pop.graph2.red
pop.graph2.red <- pop.graph2 +
geom_bar(data = percent_by_date, aes(x = mlg2, y = percent * 100, fill = fill),
stat = "identity")
pop.graph2.red
pop.graph2.red <- pop.graph2 +
geom_bar(data = percent_by_date, aes(x = mlg2, y = percent * 100),
color = percent_by_date$fill,
stat = "identity")
pop.graph2.red
View(percent_by_date)
percent_by_date[is.na(percent_by_date$percent, "fill"] <- NA
pop.graph2.red <- pop.graph2 +
geom_bar(data = percent_by_date, aes(x = mlg2, y = percent * 100),
color = percent_by_date$fill,
stat = "identity")
pop.graph2.red
percent_by_date[is.na(percent_by_date$percent), "fill"] <- NA
pop.graph2.red <- pop.graph2 +
geom_bar(data = percent_by_date, aes(x = mlg2, y = percent * 100),
color = percent_by_date$fill,
stat = "identity")
pop.graph2.red
pop.graph2.red <- pop.graph2 +
geom_bar(data = percent_by_date, aes(x = mlg2, y = percent * 100),
fll = percent_by_date$fill,
stat = "identity")
pop.graph2.red <- pop.graph2 +
geom_bar(data = percent_by_date, aes(x = mlg2, y = percent * 100),
fill = percent_by_date$fill,
stat = "identity")
pop.graph2.red
View(percent_by_date)
View(mis_inf)
#write to file
write.table(mis_inf, "over_infection.csv", row.names = F)
#Cast them into a useful shape
mis_inf <- dcast(mis_inf, date + mlg ~ type, value.var = "count")
# Do the binomial test
mis_inf$binom <- 0
for(i in 1:nrow(mis_inf)){
test <- "two.sided"
if(mis_inf[i, "Infected"] < mis_inf[i, "Random"])
test <- "less"
if(mis_inf[i, "Infected"] > mis_inf[i, "Random"])
test <- "greater"
mis_inf[i, "binom"] <- a <- binom.test(as.numeric(mis_inf[i, 3:4]), alternative = test)$p.value
}
function (..., .env = parent.frame())
# For individual clones, choose only those over 6 in either sample
mis_inf <- ddply(counts, .(date, mlg), function(x){
if(sum(x$count) >= 6)
x
})
#Cast them into a useful shape
mis_inf <- dcast(mis_inf, date + mlg ~ type, value.var = "count")
# Do the binomial test
mis_inf$binom <- 0
for(i in 1:nrow(mis_inf)){
test <- "two.sided"
if(mis_inf[i, "Infected"] < mis_inf[i, "Random"])
test <- "less"
if(mis_inf[i, "Infected"] > mis_inf[i, "Random"])
test <- "greater"
mis_inf[i, "binom"] <- a <- binom.test(as.numeric(mis_inf[i, 3:4]), alternative = test)$p.value
}
# For individual clones, choose only those over 6 in either sample
mis_inf <- ddply(counts, .(date, mlg), function(x){
if(sum(x$count) >= 6)
x
})
View(mis_inf)
# For individual clones, choose only those over 6 in either sample
mis_inf <- ddply(counts, .(date, mlg), function(x){
if(sum(x$count) >= 6)
x
})
#Cast them into a useful shape
mis_inf <- dcast(mis_inf, date + mlg ~ type, value.var = "count")
# Do the binomial test
mis_inf$binom <- 0
for(i in 1:nrow(mis_inf)){
test <- "two.sided"
if(mis_inf[i, "Infected"] < mis_inf[i, "Random"])
test <- "less"
if(mis_inf[i, "Infected"] > mis_inf[i, "Random"])
test <- "greater"
mis_inf[i, "binom"] <- a <- binom.test(as.numeric(mis_inf[i, 3:4]), alternative = test)$p.value
}
#filter by significance
mis_inf <- mis_inf[mis_inf$binom <= 0.05, ]
View(mis_inf)
# Stats 2: Fisher test on common clones -----------------------------------
# Take only those over 5%, and reshape to suit test
common <- ddply(counts, .(date, mlg), function(x){
if(sum(x$count) > 1)
x
})
common <- dcast(common, date + mlg ~ type, value.var = "count")
#Make holder & do the test
dates2 <- unique(common$date)
common.fish <- data.frame(date = dates2, p_value = 0)
for(i in 1:length(dates2)){
tmp <- common[common$date == dates2[i], 3:4]
tmp <- tmp[tmp$Infected != 0 | tmp$Random !=0, ]
fish <- fisher.test(as.matrix(tmp), workspace = 1e+09)
common.fish[i, "p_value"] <- fish$p.value
}
#Apply Bonferroni correction
common.fish$p_value <- common.fish$p_value * nrow(common.fish)
View(common.fish)
View(common)
counts[counts$count == 1,]
# Stats 2: Fisher test on common clones -----------------------------------
# Take only those over 5%, and reshape to suit test
common <- ddply(counts, .(date, mlg), function(x){
if(sum(x$percent) >= 0.05)
x
})
common <- dcast(common, date + mlg ~ type, value.var = "count")
#Make holder & do the test
dates2 <- unique(common$date)
common.fish <- data.frame(date = dates2, p_value = 0)
for(i in 1:length(dates2)){
tmp <- common[common$date == dates2[i], 3:4]
tmp <- tmp[tmp$Infected != 0 | tmp$Random !=0, ]
fish <- fisher.test(as.matrix(tmp), workspace = 1e+09)
common.fish[i, "p_value"] <- fish$p.value
}
#Apply Bonferroni correction
common.fish$p_value <- common.fish$p_value * nrow(common.fish)
# Stats 2b: Fisher test on "non-rare" clones ------------------------------
# Take only those over count == 1, and reshape to suit test
common2 <- ddply(counts, .(date, mlg), function(x){
if(sum(x$count) > 1)
x
})
common2 <- dcast(common2, date + mlg ~ type, value.var = "count")
#Make holder & do the test
dates2b <- unique(common2$date)
common.fish2 <- data.frame(date = dates2b, p_value = 0)
#Make holder & do the test
dates2b <- unique(common2$date)
common.fish2 <- data.frame(date = dates2b, p_value = 0)
for(i in 1:length(dates2b)){
tmp <- common2[common2$date == dates2b[i], 3:4]
tmp <- tmp[tmp$Infected != 0 | tmp$Random !=0, ]
fish <- fisher.test(as.matrix(tmp), workspace = 1e+09)
common.fish2[i, "p_value"] <- fish$p.value
}
#Apply Bonferroni correction
common.fish2$p_value <- common.fish2$p_value * nrow(common.fish2)
#write to file
write.table(common.fish2, "non_rare_population.csv", row.names = F)
